{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/controller.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/services/otp.ts","../../server/src/services/crypto.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  // bootstrap phase\n};\n\nexport default bootstrap;\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // register phase\n};\n\nexport default register;\n","export default {\n  default: {},\n  validator() {},\n};\n","export default {};\n","import type { Core } from '@strapi/strapi';\n\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\n  async check(ctx) {\n    const { email, docId } = ctx.request.params;\n    if (!email || !docId) return ctx.badRequest('email & docId required');\n\n    try {\n      strapi.plugin('secure-doc').services.cryptoService.decrypt(email);\n    } catch (e) {\n      return ctx.badRequest('email');\n    }\n    \n    try {\n      const docIdDecrypted = strapi.plugin('secure-doc').services.cryptoService.decrypt(docId);\n      const privateUrl = await strapi.service('api::elu.elu').getPrivateUrl(docIdDecrypted.data);\n      return ctx.send(privateUrl);\n    } catch (e) {\n      const error = e.message.split('|');\n      if (error[0] === 'Token expired') {\n        const emailDecrypted = strapi.plugin('secure-doc').services.cryptoService.decrypt(email);\n        const OTP = strapi.plugin('secure-doc').services.otp.generateOtp(4);\n        await strapi.redis.connections.default.client.set(OTP, emailDecrypted.data, 'EX', 60 * 60);\n        return ctx.badRequest('docId', strapi.plugin('secure-doc').services.cryptoService.encrypt(error[1], { ttlSeconds: 60 * 60 }));\n      }\n    }\n  },\n  async verifyOtp(ctx) {\n    const { email, otp } = ctx.request.body;\n    if (!email || !otp) return ctx.badRequest('email & otp required');\n    try {\n      const emailDecrypted = strapi.plugin('secure-doc').services.cryptoService.decrypt(email);\n      await strapi.plugin('secure-doc').services.otp.verifyOtp(otp, emailDecrypted.data);\n    } catch (e) {\n      return ctx.badRequest('otp');\n    }\n    return ctx.send({ message: 'OTP verified' });\n  }\n});\n\nexport default controller;\n\n\n","import controller from './controller';\n\nexport default {\n  controller,\n};\n","export default {};\n","export default {};\n","export default [\n  {\n    method: 'GET',\n    path: '/check/:email/:docId',\n    handler: 'controller.check',\n    config: {\n      auth: false,\n      policies: [\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/verify-otp',\n    handler: 'controller.verifyOtp',\n    config: {\n      auth: false,\n      policies: [\n      ],\n    },\n  },\n];\n","import contentAPIRoutes from './content-api';\n\nconst routes = {\n  'content-api': {\n    type: 'content-api',\n    routes: contentAPIRoutes,\n  },\n};\n\nexport default routes;\n","import type { Core } from '@strapi/strapi';\n\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\n  generateOtp(length = 6) {\n    const digits = '0123456789';\n    return Array.from({ length }, () => digits[Math.floor(Math.random() * 10)]).join('');\n  },\n  async verifyOtp(otp, email) {\n    const isOtpValid = await strapi.redis.connections.default.client.get(otp);\n    if (!isOtpValid || isOtpValid !== email) {\n      const err = new Error('OTP invalid');\n      throw err;\n    }\n    await strapi.redis.connections.default.client.del(otp);\n    return true;\n  }\n});\n\nexport default service;\n","import type { Core } from '@strapi/strapi';\n\nimport crypto from 'crypto';\n\nconst ALGO = 'aes-256-gcm';\nconst KEY_ENV = process.env.OBFUSCATION_KEY; // 32 bytes (base64 or hex) stockée dans tes secrets\nif (!KEY_ENV) {\n  console.warn('Warning: OBFUSCATION_KEY not set. Set a strong 32-byte key in env.');\n}\n\nconst cryptoService = ({ strapi }: { strapi: Core.Strapi }) => ({\n  base64urlEncode(buf) {\n    return buf.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  },\n  base64urlDecode(str) {\n    // pad base64\n    str = str.replace(/-/g, '+').replace(/_/g, '/');\n    while (str.length % 4) str += '=';\n    return Buffer.from(str, 'base64');\n  },\n  getKey() {\n    if (!KEY_ENV) throw new Error('OBFUSCATION_KEY not configured');\n    // try hex\n    if (/^[0-9a-fA-F]{64}$/.test(KEY_ENV)) return Buffer.from(KEY_ENV, 'hex');\n    // else assume base64\n    return Buffer.from(KEY_ENV, 'base64');\n  },\n  encrypt(data, opts: { ttlSeconds?: number, meta?: any } = {}) {\n    const key = this.getKey();\n    const iv = crypto.randomBytes(12); // 96-bit IV recommandé pour GCM\n    const cipher = crypto.createCipheriv(ALGO, key, iv, { authTagLength: 16 });\n  \n    // payload : JSON (email + exp + maybe docId)\n    const payload = {\n      data,\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + (opts.ttlSeconds || 60 * 60), // default 1h\n      meta: opts.meta || null,\n    };\n    const plaintext = Buffer.from(JSON.stringify(payload), 'utf8');\n  \n    const ciphertext = Buffer.concat([cipher.update(plaintext), cipher.final()]);\n    const tag = cipher.getAuthTag();\n  \n    // encode iv|ciphertext|tag en base64url séparés par .\n    return [\n      this.base64urlEncode(iv),\n      this.base64urlEncode(ciphertext),\n      this.base64urlEncode(tag)\n    ].join('.');\n  },\n  decrypt(tokenStr) {\n    const key = this.getKey();\n    const parts = String(tokenStr || '').split('.');\n    if (parts.length !== 3) throw new Error('Malformed token');\n  \n    const iv = this.base64urlDecode(parts[0]);\n    const ciphertext = this.base64urlDecode(parts[1]);\n    const tag = this.base64urlDecode(parts[2]);\n  \n    const decipher = crypto.createDecipheriv(ALGO, key, iv, { authTagLength: 16 });\n    decipher.setAuthTag(tag);\n  \n    const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    const payload = JSON.parse(plaintext.toString('utf8'));\n  \n    // check expiration\n    const now = Math.floor(Date.now() / 1000);\n    if (payload.exp && payload.exp < now) {\n      const err = new Error(`Token expired|${payload.data}`);\n      throw err;\n    }\n  \n    return payload;\n  },\n})\n\nexport default cryptoService;","import otp from './otp';\nimport cryptoService from './crypto';\n\nexport default {\n  otp,\n  cryptoService,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n"],"names":["otp"],"mappings":"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"}